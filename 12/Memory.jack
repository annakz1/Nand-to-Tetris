// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array ram;
	static Array heap;
	static Array freeList;

    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let heap = 2048; // heapBase
		let freeList = heap;
		let heap[0] = null; // next
		let heap[1] = 14334; // length
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var Array freeListTmp;
		var int blockAddr;
		var int currSegmentSize;
		var boolean found;
		var boolean initialHeap;
		
		let freeListTmp = freeList;
		let found = false;
		while(~(freeListTmp = null) & ~(found)){
			let currSegmentSize = freeListTmp[1];
			if(~( currSegmentSize < (size+2))){
				// found a segment
				let found = true;
				let blockAddr = freeListTmp +2 + currSegmentSize - size;
				let blockAddr[0] = null; // next
				let blockAddr[1] = size; // size
				let freeListTmp[1] = freeListTmp[1] - (size+2);
			}
			let freeListTmp = freeListTmp[0]; // go to next segment
		}
		
		// not found
		if(~found){
			return -1;
		}
		
		return blockAddr;

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var Array freeListTmp;
		
		let freeListTmp = freeList;
		while(~(freeListTmp[0] = null)){
			let freeListTmp = freeListTmp[0]; // go to next segment
		}
		//reached last segment
		let freeListTmp[0] = o;
		let freeListTmp = freeListTmp[0];
		let freeListTmp[0] = null;
		
		return;
    }    
}
